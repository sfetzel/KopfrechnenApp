/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
 
var Kopfrechnen = require("./Kopfrechnen");
 
var app = {
	kopfrechnenInstance: new Kopfrechnen(),
	
	// Application Constructor
	initialize: function()
	{
		this.bindEvents();
	},
	
	// Bind Event Listeners
	//
	// Bind any events that are required on startup. Common events are:
	// 'load', 'deviceready', 'offline', and 'online'.
	bindEvents: function()
	{
		document.addEventListener('deviceready', this.onDeviceReady, false);
		var self = this;
		$( "#KopfrechnenStartButton" ).bind( "click", function(event, ui)
		{
			self.kopfrechnenInstance.setDifficulty($("#DifficultySlider").val());
			var exercise = self.kopfrechnenInstance.getRandomExercise();
			$("#ExerciseText").html(exercise.toString());
		});
		
		
		// Event handler for the press of a number button
		// adds the pressed number to the solution number input
		$( ".number-button" ).bind("click", function(event, ui)
		{
			var number = parseInt($.trim($(this).text()));
			if(number != Number.NaN)
			{
				var solutionInput = $("#SolutionInput");
				var solution = solutionInput.val();
				var newSolution = solution + number;
				solutionInput.val(newSolution);
				
			}
		});
		
		$("#CheckButton").bind("click", function(event, ui)
		{
			console.log("kp!");
		})
	},
	
	// deviceready Event Handler
	//
	// The scope of 'this' is the event. In order to call the 'receivedEvent'
	// function, we must explicity call 'app.receivedEvent(...);'
	onDeviceReady: function()
	{
		app.receivedEvent('deviceready');
	},
	// Update DOM on a Received Event
	receivedEvent: function(id)
	{
		var parentElement = document.getElementById(id);
		var listeningElement = parentElement.querySelector('.listening');
		var receivedElement = parentElement.querySelector('.received');

		listeningElement.setAttribute('style', 'display:none;');
		receivedElement.setAttribute('style', 'display:block;');

		console.log('Received Event: ' + id);
	}
};

app.initialize();
